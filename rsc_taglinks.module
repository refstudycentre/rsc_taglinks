<?php


/**
 * Implements hook_filter_info()
 */
function rsc_taglinks_filter_info() {
  $filters['filter_rsc_taglinks'] = array(
    'title' => t('Parse RSC tag links'),
    'description' => t('Parses content, changing [[tag]] into a link to the tag, and tagging the content as necessary.'),
    'process callback' => '_rsc_taglinks_filter_process',
    'settings callback' => '_rsc_taglinks_filter_settings' // NOTE: this callback is not implemented...?
  );
  return $filters;
}


/**
 * Implmenets hook_permission
 */
function rsc_taglinks_permission() {
  $ret = array();

  //admin
  $ret['Administer RSC taglinks'] = array(
    'title' => t('Administer RSC taglinks')
  );

  return $ret;
}


/**
 * Implements hook_menu
 */
function rsc_taglinks_menu() {
  
  //administrative menu
  $items['admin/config/content/rsc-taglinks'] = array(
    'title'            => 'RSC Taglinks Administration',
    'description'      => 'Change how RSC tag links are parsed.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('rsc_taglinks_settings'),
    'access arguments' => array('Administer RSC taglinks')
  );

  //empty-tags menu
  $items['admin/config/content/empty-tags'] = array(
    'title'            => 'Empty Tags',
    'description'      => 'View tags that have no associated content.',
    'page arguments'   => array('rsc_taglinks_empty_tag_form'),
    'page callback'    => array('drupal_get_form'),
    'access arguments' => array('Administer RSC taglinks')
  );

  return $items;
}


/**
 * Builds the form for managing "empty" tags
 */
function rsc_taglinks_empty_tag_form() {

  $alltags = taxonomy_get_tree(variable_get('rsc_taglinks_vid'));
  $emptytags = array();

  foreach($alltags as $tag)
  {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')->fieldCondition('field_tags', 'tid', $tag->tid);
    $result = $query->execute();
    if (empty($result))
    {
      $emptytags[$tag->tid] = $tag->name;
    }
  }

  $form = array();

  $form['removetags'] = array(
    '#type' => 'select',
    '#title' => t('Select tags to remove:'),
    '#options' => $emptytags,
    '#multiple' => true,
    '#size' => 10
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Delete'));

  return $form;
}



function rsc_taglinks_empty_tag_form_validate($form, &$form_state) {
  // Validation logic?
}



function rsc_taglinks_empty_tag_form_submit($form, &$form_state) {
  if (isset($form_state['input']['removetags'])) {
    foreach($form_state['input']['removetags'] as $tid) {
      taxonomy_term_delete($tid);
    }
  }
  drupal_set_message(t('Terms removed.'));
}



function rsc_taglinks_settings() {
  $vocabs = taxonomy_vocabulary_get_names();
  $vocab_options = array();
  $default_vid = -1;
  foreach ($vocabs as $vocab) {
    $vocab_options[$vocab->vid] = $vocab->name;
    if ($vocab->machine_name == 'tags') {
      $default_vid = $vocab->vid;
    }
  }

  $fformats = filter_formats();
  $format_options = array();
  foreach($fformats as $machine => $format) {
    $format_options[$machine] = $format->name;
  }

  $form = array();

  $form['rsc_taglinks_vid'] = array(
    '#type' => 'select',
    '#title' => t('Machine name of the vocabulary used for tags'),
    '#default_value' => variable_get('rsc_taglinks_vid',$default_vid),
    '#options' => $vocab_options
  );

  $form['rsc_taglinks_formats'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Text formats which are enabled for automatic tagging'),
    '#default_value' => variable_get('rsc_taglinks_formats',array()),
    '#options' => $format_options,
    '#multiple' => true
  );

  return system_settings_form($form);
}



function _rsc_taglinks_filter_process($text, $format) {
  if (!empty($text)) {
    $vid = variable_get('rsc_taglinks_vid',-1);
    $vocab = taxonomy_vocabulary_load($vid)->machine_name;

    $replace_tag = function ($m) use ($vocab) {
      
      $terms = taxonomy_get_term_by_name($m[1], $vocab); // eers vanaf D7.14 :O
      $term = array_shift($terms);
      if (!is_null($term)) {
        $uri = taxonomy_term_uri($term);
        $ret = l($m[1],$uri['path']);
      } else {
        $ret = $m[1];
      }
      return $ret;
    };
    $text = preg_replace_callback("/\[\[(.*?)\]\]/",$replace_tag,$text);
  }
  return $text;
}


/**
 * Implements hook_node_presave().
 */
function rsc_taglinks_node_presave($node) {
  $vid = variable_get('rsc_taglinks_vid', -1);
  $vocabulary = taxonomy_vocabulary_load($vid);
  if (isset($vocabulary->machine_name)) {
    $vocab_machine_name = $vocabulary->machine_name;
  } else {
    // rsc_taglinks has not been configured yet, or the configured vocabulary does not exist
    return;
  }

  $tagfield = '';
  $fields = field_info_fields();
  $instances = field_info_instances('node',$node->type);
  $textfields = array();
  
  // search for a field referencing the tags taxonomy
  foreach($fields as $name => $field) {
    if (!empty($field['bundles']['node']) && in_array($node->type,$field['bundles']['node']) && !empty($field['settings']['allowed_values'][0]['vocabulary']) && $field['settings']['allowed_values'][0]['vocabulary'] == $vocab_machine_name) {
      $tagfield = $name;
      break; // use the first one found
    }
  }
  
  // search for fields using the text processing
  foreach($instances as $name => $instance) {
    if (!empty($instance['settings']['text_processing']) && $instance['settings']['text_processing'] == '1') {
      $textfields[] = $name;
    }
  }

  // if a tagfield and processed textfield is found 
  if (!empty($tagfield) && !empty($textfields)) {
    $formats = variable_get('rsc_taglinks_formats');

    // get new [[tags]]
    $new_tags = array();
    
    foreach ($textfields as $fieldname) {

      // Get the field values, if any
      $items = field_get_items('node',$node,$fieldname);
      if ($items) {

        // For each field value (usually only one)
        foreach ($items as $item) {

          // Check if the chosen format is enabled for taglinks processing
          // use strict checking http://sg3.php.net/manual/en/function.in-array.php#106319
          if (!empty($item['format']) && in_array($item['format'], $formats, TRUE)) {

            // Find all [[tags]]
            $matches = array();
            preg_match_all("/\[\[(.*?)\]\]/", $item['value'], $matches);
            $new_tags = array_merge($new_tags, $matches[1]);

          }
        }
      }
    }
    
    if (!empty($new_tags)) {
      // NB: https://www.drupal.org/node/1500308#comment-5794848
      $langcode = $fields[$tagfield]['translatable'] ? $node->language : LANGUAGE_NONE; // determine current language
      $node->{$tagfield}[$langcode] = array(); // remove old tags

      // add new tags
      $success_count = 0;
      $fail_count = 0;
      foreach($new_tags as $tag_name) {

        // check if the term exists
        $tid = _rsc_taglinks_get_tid($vid, $tag_name);

        if (FALSE == $tid) {

          // try to create the term
          taxonomy_term_save((object) array(
            'name' => $tag_name,
            'vid' => $vid
          ));

          // check whether it exists now
          $tid = _rsc_taglinks_get_tid($vid, $tag_name);

        }

        if (FALSE == $tid) {
          // we tried to create the term, but it didn't work
          $fail_count++;
        } else {
          // add the term to the reference field
          $node->{$tagfield}[$langcode][] = array('tid'=>$tid);
          $success_count++;
        }

      }

      // Removed this message because it floods the screen when we update multiple nodes in batch mode or with a script.
//      if ($success_count) {
//        drupal_set_message(t('Auto-assigned !num tags for node @title',array(
//          '!num'   => $success_count,
//          '@title' => $node->title,
//        )));
//      }
      if ($fail_count) {
        drupal_set_message(t('Failed to create !num tags for node @title.',array(
          '!num'   => $fail_count,
          '@title' => $node->title,
        )),'error');
      }
    }
  }
}


/**
 * Get the taxonomy term id for the given term name and vocabulary
 */
function _rsc_taglinks_get_tid($vid, $term_name) {

  /*
   * The correct, but slow, API-driven way:
   */
//  $terms = taxonomy_get_term_by_name($term_name, $vocab_machine_name);
//  $term = array_shift($terms);
//  return $term->tid;

  /*
   * The quick, but SQL-dependent way:
   */
  $result = db_query("SELECT tid FROM `taxonomy_term_data` WHERE vid=:vid AND name=:name LIMIT 1", array(
    ':vid'  => $vid,
    ':name' => $term_name,
  ));
  return $result->fetchField();

}
